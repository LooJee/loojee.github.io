<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>chit-chat</title>
        <link>https://loojee.github.io/</link>
        <description>golang, rust, redis</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><copyright>&amp;copy;2019~time.Now(), All Rights Reserved</copyright><lastBuildDate>Thu, 25 Mar 2021 15:06:14 &#43;0800</lastBuildDate>
            <atom:link href="https://loojee.github.io/index.xml" rel="self" type="application/rss+xml" />
        <item>
    <title>Design Pattern With Go: Factory</title>
    <link>https://loojee.github.io/posts/design-pattern-with-go-factory/</link>
    <pubDate>Thu, 25 Mar 2021 15:06:14 &#43;0800</pubDate>
    <author>Loojee</author>
    <guid>https://loojee.github.io/posts/design-pattern-with-go-factory/</guid>
    <description><![CDATA[这次介绍的设计模式是工厂模式，这是一个比较常见的创建型模式。一般情况下，工厂模式分为三种：简单工厂、工厂方法和抽象工厂，下面慢慢举例介绍下。]]></description>
</item>
<item>
    <title>Design Pattern With Go: Singleton</title>
    <link>https://loojee.github.io/posts/design-pattern-with-go-singleton/</link>
    <pubDate>Mon, 22 Mar 2021 11:58:09 &#43;0800</pubDate>
    <author>Loojee</author>
    <guid>https://loojee.github.io/posts/design-pattern-with-go-singleton/</guid>
    <description><![CDATA[定义 一个类只允许创建一个对象（或者实例），那这个类就是一个单例类，这种设计模式就叫作单例模式。当某些数据只需要在系统中保留一份的时候，可以选]]></description>
</item>
<item>
    <title>外部主机无法访问宿主机内容器是怎么回事</title>
    <link>https://loojee.github.io/forwarding_from_docker_containers_to_the_outside_world.html</link>
    <pubDate>Mon, 01 Feb 2021 10:05:06 &#43;0800</pubDate>
    <author>Loojee</author>
    <guid>https://loojee.github.io/forwarding_from_docker_containers_to_the_outside_world.html</guid>
    <description><![CDATA[TL;DR 是因为创建的容器采用的网络类型是 bridge，而宿主机没有启用 ip 转发，所以，外部主机请求没有转发到对应容器。需要两个步骤启用 ip 转发功能。（]]></description>
</item>
<item>
    <title>初识golang中的反射</title>
    <link>https://loojee.github.io/first_meet_golang_reflect.html</link>
    <pubDate>Fri, 13 Sep 2019 14:26:53 &#43;0000</pubDate>
    <author>Loojee</author>
    <guid>https://loojee.github.io/first_meet_golang_reflect.html</guid>
    <description><![CDATA[定义类型、声明变量、使用变量是一门编程语言的基本功能，我们可以这样来定义一个结构体类型： type Foo struct { X string `foo:&#34;x&#34;` Y int `foo:&#34;y&#34;` } 像这样来使用这个类型声明一个变]]></description>
</item>
<item>
    <title>读源码:redigo 的连接池</title>
    <link>https://loojee.github.io/redigo_pool.html</link>
    <pubDate>Sun, 23 Jun 2019 23:20:48 &#43;0000</pubDate>
    <author>Loojee</author>
    <guid>https://loojee.github.io/redigo_pool.html</guid>
    <description><![CDATA[前面有说到，redigo 不是一个并发安全的 redis 库，它推荐在并发时使用连接池来访问 redis 服务器，redigo 连接池的典型使用方法如下所示： package main import ( &#34;github.com/gomodule/redigo/redis&#34;]]></description>
</item>
<item>
    <title>读源码:redigo为什么多线程不安全</title>
    <link>https://loojee.github.io/why_redis_unsafe_in_concurrence.html</link>
    <pubDate>Sun, 16 Jun 2019 21:05:45 &#43;0000</pubDate>
    <author>Loojee</author>
    <guid>https://loojee.github.io/why_redis_unsafe_in_concurrence.html</guid>
    <description><![CDATA[redigo是golang的一个操作redis的第三方库，之所以选择这个库，是因为它的文档十分丰富，操作起来也比较简单。一个典型的redig]]></description>
</item>
<item>
    <title>golang 中 time 包的时区问题</title>
    <link>https://loojee.github.io/time_package_in_golang.html</link>
    <pubDate>Fri, 24 May 2019 16:16:49 &#43;0000</pubDate>
    <author>Loojee</author>
    <guid>https://loojee.github.io/time_package_in_golang.html</guid>
    <description><![CDATA[最近项目中有一个功能，是定时从远端服务器同步数据到本地，数据中有一个字段是时间格式的。每次我的同步程序从服务器上获取到数据和本地数据库保存的]]></description>
</item>
<item>
    <title>golang 中 for range 的问题</title>
    <link>https://loojee.github.io/for_range_in_golang.html</link>
    <pubDate>Wed, 17 Apr 2019 14:21:09 &#43;0000</pubDate>
    <author>Loojee</author>
    <guid>https://loojee.github.io/for_range_in_golang.html</guid>
    <description><![CDATA[最近项目在使用 golang 开发，对于一直使用 c 开发的我来说 golang 有着十分强大的内置库，生态也还可以，使用起来确实十分的舒适，最重要的是不需要手动管理内存，]]></description>
</item>
<item>
    <title>初探域名解析</title>
    <link>https://loojee.github.io/63.html</link>
    <pubDate>Sun, 31 Mar 2019 14:18:43 &#43;0000</pubDate>
    <author>Loojee</author>
    <guid>https://loojee.github.io/63.html</guid>
    <description><![CDATA[最近发现在 aws 上有 12 个月免费使用的 ec2 主机，于是就注册了一个，顺便搭建了这个博客。但是，一个好的博客不能总是用 IP 来访问的嘛。于是就在 godaddy 上买了一个]]></description>
</item>
<item>
    <title>译-redis延迟问题排查</title>
    <link>https://loojee.github.io/translation_redis_latency.html</link>
    <pubDate>Mon, 01 Jan 0001 00:00:00 &#43;0000</pubDate>
    <author>Loojee</author>
    <guid>https://loojee.github.io/translation_redis_latency.html</guid>
    <description><![CDATA[本文是对 redis 官方文档 Redis latency problems troubleshooting 的翻译，诸位看官可结合原文食用。 这个文档将会帮助你理解在使用 Redis 遇到延迟问题时发生了什么。 在这个上下文中，延迟指的是]]></description>
</item>
</channel>
</rss>
